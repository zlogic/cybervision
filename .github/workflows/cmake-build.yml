name: CMake

on:
  push:
    branches: [ "master", "experimental-photo-support" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      matrix:
        include:
        - arch: amd64
          mode: gpu
          os: ubuntu-focal
        - arch: amd64
          mode: cpu
          os: ubuntu-focal
        - arch: arm64
          mode: gpu
          os: ubuntu-focal
        - arch: arm64
          mode: cpu
          os: ubuntu-focal

    steps:
    - uses: actions/checkout@v3

    - name: Cache vcpkg dependencies
      id: cache-vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ~/vcpkg 
          ./build/vcpkg_installed
          ${{ env.HOME }}/.cache/vcpkg/archives
          ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
        key: vcpkgs-${{ runner.os }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.mode }}-${{ hashFiles('vcpkg.json') }}

    - name: Install YASM
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: sudo apt-get install -y yasm

    - name: Install compiler and prepare for cross-compilation
      if: matrix.arch  == 'arm64'
      run: |
        sudo apt-get install -y crossbuild-essential-arm64 qemu-user-static
        echo 'set(ENV{LD_LIBRARY_PATH} "/usr/aarch64-linux-gnu/lib:$ENV{LD_LIBRARY_PATH}")' >> $VCPKG_INSTALLATION_ROOT/triplets/community/arm64-linux.cmake
        sudo ln -s /usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.1 /lib/ld-linux-aarch64.so.1
        echo "CC=/usr/bin/aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX=/usr/bin/aarch64-linux-gnu-g++" >> $GITHUB_ENV
        echo "VCPKG_TARGET_ARCHITECTURE=arm64" >> $GITHUB_ENV
        echo "VCPKG_DEFAULT_TRIPLET=arm64-linux" >> $GITHUB_ENV
        echo "VCPKG_DEFAULT_HOST_TRIPLET=arm64-linux" >> $GITHUB_ENV

    - name: Enable arm64 repositories
      if: matrix.mode == 'gpu' && matrix.arch  == 'arm64'
      run: |
        sudo dpkg --add-architecture arm64
        sudo sed 's/deb http/deb \[arch=amd64,i386\] http/' -i /etc/apt/sources.list
        echo | sudo tee -a /etc/apt/sources.list <<EOF
        deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -cs) main universe restricted multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -cs)-updates main universe restricted multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -cs)-security main universe restricted multiverse
        EOF
        sudo apt update

    - name: Install libvulkan-dev
      if: matrix.mode == 'gpu'
      run: |
        sudo apt install -y libvulkan-dev:${{ matrix.arch }}

    - name: Configure vcpkg
      run: echo "CMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        VCPKG_ARCH=${{matrix.arch}}
        if [ "${{matrix.arch}}" == "amd64" ]; then
          VCPKG_ARCH=x64
        fi
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCYBERVISION_DISABLE_GPU=${{matrix.mode != 'gpu'}} -DVCPKG_TARGET_TRIPLET=${VCPKG_ARCH}-linux -DCMAKE_SYSTEM_PROCESSOR=${{matrix.arch}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target cybervision
  
    - name: Package application
      run: tar -cvjf cybervision-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.mode }}.tar.bz2 -C build cybervision
  
    - name: Upload application
      uses: actions/upload-artifact@v3
      with:
        name: cybervision-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.mode }}
        path: cybervision-*.tar.bz2

  build-windows:
    runs-on: windows-latest
    env:
      VULKAN_LOADER_VERSION: 1.3.231
      VULKAN_SDK: "${{github.workspace}}\\vulkan-sdk"
    strategy:
      fail-fast: true
      matrix:
        include:
        - arch: x64
          mode: gpu
        - arch: x64
          mode: cpu
        - arch: arm64
          mode: cpu

    steps:
    - uses: actions/checkout@v3

    - name: Cache vcpkg dependencies
      id: cache-vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ~/vcpkg 
          ./build/vcpkg_installed
          ${{ env.HOME }}/.cache/vcpkg/archives
          ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
          ~\AppData\Local\vcpkg\archives
          ~\AppData\Roaming\vcpkg\archives
        key: vcpkgs-${{ runner.os }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.mode }}-${{ hashFiles('vcpkg.json') }}

    - name: Install NASM
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: choco install nasm

    - name: Cache Vulkan SDK
      id: cache-vulkan-sdk
      if: matrix.mode == 'gpu'
      uses: actions/cache@v3
      with:
        path: vulkan-sdk
        key: ${{ runner.os }}-${{ matrix.arch }}-vulkan-sdk-${{ env.VULKAN_LOADER_VERSION }}

    - name: Build Vulkan SDK
      if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true' && matrix.mode == 'gpu'
      run: |
        Invoke-WebRequest -Uri https://github.com/KhronosGroup/Vulkan-Loader/archive/refs/tags/v${{ env.VULKAN_LOADER_VERSION }}.zip -OutFile Vulkan-Loader.zip
        Expand-Archive Vulkan-Loader.zip
        $InstallPath = Join-Path $(Get-Location) -ChildPath vulkan-sdk
        Set-Location -Path "Vulkan-Loader\Vulkan-Loader-${{ env.VULKAN_LOADER_VERSION }}"
        cmake -A ${{ matrix.arch }} -S. -Bbuild -DUPDATE_DEPS=On -DCMAKE_INSTALL_PREFIX="$InstallPath" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build build --config Release --target install
        Copy-Item -Path "external\Vulkan-Headers\build\install\include" -Destination "$InstallPath" -Recurse

    - name: Configure vcpkg
      run: echo "CMAKE_TOOLCHAIN_FILE=$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" >> $env:GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCYBERVISION_DISABLE_GPU=${{matrix.mode != 'gpu'}} -A ${{matrix.arch}} -DVCPKG_TARGET_TRIPLET=${{matrix.arch}}-windows-static-md
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target cybervision
  
    - name: Package application
      run: Compress-Archive -Path .\build\Release\cybervision.exe -DestinationPath cybervision-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.mode }}.zip

    - name: Upload application
      uses: actions/upload-artifact@v3
      with:
        name: cybervision-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.mode }}
        path: cybervision-*.zip

  build-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: true
      matrix:
        arch: [arm64, x64]

    steps:
    - uses: actions/checkout@v3

    - name: Cache vcpkg dependencies
      id: cache-vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ~/vcpkg 
          ./build/vcpkg_installed
          ${{ env.HOME }}/.cache/vcpkg/archives
          ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
        key: vcpkgs-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('vcpkg.json') }}

    - name: Install YASM
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: brew install yasm

    - name: Configure vcpkg
      run: echo "CMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        OSX_ARCHITECTURES=${{matrix.arch}}
        if [ "${{matrix.arch}}" == "x64" ]; then
          OSX_ARCHITECTURES=x86_64
        fi
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_OSX_ARCHITECTURES=${OSX_ARCHITECTURES} -DVCPKG_TARGET_TRIPLET=${{matrix.arch}}-osx

    - name: Cache shaders
      id: cache-shaders
      uses: actions/cache@v3
      with:
        path: cybervision/shaders_metal.h
        key: shaders-${{ runner.os }}-${{matrix.arch}}-${{ hashFiles('shaders/correlation.metal') }}
  
    - name: Compile shaders
      if: steps.cache-shaders.outputs.cache-hit != 'true'
      run: cmake --build ${{github.workspace}}/build --target shaders

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target cybervision

    - name: Package application
      run: tar -cvjf cybervision-${{ runner.os }}-${{ matrix.arch }}.tar.bz2 -C build cybervision

    - name: Upload application
      uses: actions/upload-artifact@v3
      with:
        name: cybervision-${{ runner.os }}-${{ matrix.arch }}
        path: cybervision-*.tar.bz2
