name: CMake

on:
  push:
    branches: [ "master", "rewrite_to_c" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        arch: [amd64, arm64]
        os: ["ubuntu-bionic"]

    steps:
    - uses: actions/checkout@v3

    - name: Cache vcpkg dependencies
      id: cache-vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ~/vcpkg 
          ./build/vcpkg_installed
          ${{ env.HOME }}/.cache/vcpkg/archives
          ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
        key: vcpkgs-${{ runner.os }}-${{ matrix.os }}-${{ matrix.arch }}-${{ hashFiles('vcpkg.json') }}

    - name: Install YASM
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: sudo apt-get install -y yasm
    
    - name: Install compiler
      if: matrix.arch  == 'arm64'
      run: |
        sudo apt-get install -y g++-aarch64-linux-gnu gcc-aarch64-linux-gnu
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CPP=aarch64-linux-gnu-g++" >> $GITHUB_ENV

    - name: Configure vcpkg
      run: echo "CMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        VCPKG_ARCH=${{matrix.arch}}
        if [ "${{matrix.arch}}" == "amd64" ]; then
          VCPKG_ARCH=x64
        fi
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DVCPKG_TARGET_TRIPLET=${VCPKG_ARCH}-linux -DCMAKE_SYSTEM_PROCESSOR=${{matrix.arch}}
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  
    - name: Package application
      run: tar -cvjf cybervision-${{ matrix.os }}-${{ matrix.arch }}.tar.bz2 -C build cybervision
  
    - name: Upload application
      uses: actions/upload-artifact@v3
      with:
        name: cybervision-${{ matrix.os }}-${{ matrix.arch }}
        path: cybervision-${{ matrix.os }}-${{ matrix.arch }}.tar.bz2

  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        arch: [arm64, x64]

    steps:
    - uses: actions/checkout@v3

    - name: Cache vcpkg dependencies
      id: cache-vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ~/vcpkg 
          ./build/vcpkg_installed
          ${{ env.HOME }}/.cache/vcpkg/archives
          ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
          ${{ env.LOCALAPPDATA }}\vcpkg\archives
          ${{ env.APPDATA }}\vcpkg\archives
        key: ${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('vcpkg.json') }}

    - name: Install NASM
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: choco install nasm

    - name: Configure vcpkg
      run: echo "CMAKE_TOOLCHAIN_FILE=$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" >> $env:GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -A ${{matrix.arch}}
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  
    - name: Package application
      run: Compress-Archive -Path .\build\Release\cybervision.exe,.\build\Release\*.dll -DestinationPath cybervision-${{ runner.os }}-${{ matrix.arch }}.zip

    - name: Upload application
      uses: actions/upload-artifact@v3
      with:
        name: cybervision-${{ runner.os }}-${{ matrix.arch }}
        path: cybervision-${{ runner.os }}-${{ matrix.arch }}.zip

  build-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: true
      matrix:
        arch: [arm64, x64]

    steps:
    - uses: actions/checkout@v3

    - name: Cache vcpkg dependencies
      id: cache-vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ~/vcpkg 
          ./build/vcpkg_installed
          ${{ env.HOME }}/.cache/vcpkg/archives
          ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
        key: ${{ runner.os }}-${{matrix.arch}}-${{ hashFiles('vcpkg.json') }}

    - name: Install YASM
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: brew install yasm

    - name: Configure vcpkg
      run: echo "CMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        OSX_ARCHITECTURES=${{matrix.arch}}
        if [ "${{matrix.arch}}" == "x64" ]; then
          OSX_ARCHITECTURES=x86_64
        fi
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_OSX_ARCHITECTURES=${OSX_ARCHITECTURES} -DVCPKG_TARGET_TRIPLET=${{matrix.arch}}-osx
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Package application
      run: tar -cvjf cybervision-${{ runner.os }}-${{ matrix.arch }}.tar.bz2 -C build cybervision
  
    - name: Upload application
      uses: actions/upload-artifact@v3
      with:
        name: cybervision-${{ runner.os }}-${{ matrix.arch }}
        path: cybervision-${{ runner.os }}-${{ matrix.arch }}.tar.bz2
